
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  role: 'role',
  firstname: 'firstname',
  lastname: 'lastname',
  email: 'email',
  phonenumber: 'phonenumber',
  phoneCountryCode: 'phoneCountryCode',
  isVerifiedEmail: 'isVerifiedEmail',
  isVerifiedPhonenumber: 'isVerifiedPhonenumber',
  profileURL: 'profileURL',
  socketId: 'socketId',
  lastLocationUpdate: 'lastLocationUpdate',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  lockoutUntil: 'lockoutUntil',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RiderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  rating: 'rating',
  totalRides: 'totalRides',
  cancelledRides: 'cancelledRides'
};

exports.Prisma.DriverScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  status: 'status',
  vehicleType: 'vehicleType',
  rating: 'rating',
  totalRides: 'totalRides',
  cancelledRides: 'cancelledRides',
  isVerified: 'isVerified',
  isRegistrationComplete: 'isRegistrationComplete',
  serviceAreaId: 'serviceAreaId',
  isInServiceArea: 'isInServiceArea',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceAreaScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  coordinates: 'coordinates',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VehicleScalarFieldEnum = {
  id: 'id',
  driverId: 'driverId',
  model: 'model',
  year: 'year',
  color: 'color',
  licensePlate: 'licensePlate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  driverId: 'driverId',
  type: 'type',
  documentId: 'documentId',
  name: 'name',
  number: 'number',
  isVerified: 'isVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EarningsScalarFieldEnum = {
  id: 'id',
  driverId: 'driverId',
  totalEarnings: 'totalEarnings',
  currentBalance: 'currentBalance'
};

exports.Prisma.RideScalarFieldEnum = {
  id: 'id',
  riderId: 'riderId',
  driverId: 'driverId',
  distance: 'distance',
  duration: 'duration',
  promoCodeId: 'promoCodeId',
  cancelReason: 'cancelReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  phonenumber: 'phonenumber',
  phoneCountryCode: 'phoneCountryCode',
  email: 'email',
  role: 'role',
  password: 'password',
  refreshToken: 'refreshToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RegistrationTemplateScalarFieldEnum = {
  id: 'id',
  country: 'country',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RegistrationStepScalarFieldEnum = {
  id: 'id',
  status: 'status',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  templateId: 'templateId'
};

exports.Prisma.StepDefinitionScalarFieldEnum = {
  id: 'id',
  stepId: 'stepId',
  type: 'type',
  stepVersion: 'stepVersion',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RegistrationProgressScalarFieldEnum = {
  id: 'id',
  driverId: 'driverId',
  country: 'country',
  currentStepId: 'currentStepId',
  completedSteps: 'completedSteps',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.Role = exports.$Enums.Role = {
  driver: 'driver',
  rider: 'rider',
  super_admin: 'super_admin'
};

exports.ShiftStatus = exports.$Enums.ShiftStatus = {
  ACTIVE: 'ACTIVE',
  ON_BREAK: 'ON_BREAK',
  ENDED: 'ENDED'
};

exports.DriverStatus = exports.$Enums.DriverStatus = {
  AVAILABLE: 'AVAILABLE',
  OFFLINE: 'OFFLINE',
  ONLINE: 'ONLINE'
};

exports.VehicleType = exports.$Enums.VehicleType = {
  CAR: 'CAR',
  BIKE: 'BIKE'
};

exports.RegistrationStatus = exports.$Enums.RegistrationStatus = {
  not_started: 'not_started',
  in_progress: 'in_progress',
  completed: 'completed',
  failed: 'failed'
};

exports.StepType = exports.$Enums.StepType = {
  driverLicense: 'driverLicense',
  profilePhoto: 'profilePhoto',
  document: 'document',
  vehicleRegistration: 'vehicleRegistration',
  vehicleInsurance: 'vehicleInsurance'
};

exports.Prisma.ModelName = {
  User: 'User',
  Rider: 'Rider',
  Driver: 'Driver',
  ServiceArea: 'ServiceArea',
  Vehicle: 'Vehicle',
  Document: 'Document',
  Earnings: 'Earnings',
  Ride: 'Ride',
  Admin: 'Admin',
  RegistrationTemplate: 'RegistrationTemplate',
  RegistrationStep: 'RegistrationStep',
  StepDefinition: 'StepDefinition',
  RegistrationProgress: 'RegistrationProgress'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/user/uber-turbo/packages/database/generated/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-1.1.x",
        "native": true
      }
    ],
    "previewFeatures": [
      "driverAdapters"
    ],
    "sourceFilePath": "/home/user/uber-turbo/packages/database/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": "../../.env",
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.11.1",
  "engineVersion": "f40f79ec31188888a2e33acda0ecc8fd10a853a9",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mongodb",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"driverAdapters\"]\n  output          = \"./../generated/client\"\n}\n\ndatasource db {\n  provider  = \"mongodb\"\n  url       = env(\"DATABASE_URL\")\n  directUrl = env(\"DIRECT_DATABASE_URL\")\n}\n\n// ================================\n// User Model\n// ================================\n\nmodel User {\n  id                    String    @id @default(auto()) @map(\"_id\") @db.ObjectId\n  role                  Role\n  firstname             String\n  lastname              String?\n  email                 String?   @unique\n  phonenumber           String?   @unique\n  phoneCountryCode      String?\n  isVerifiedEmail       Boolean?  @default(false)\n  isVerifiedPhonenumber Boolean?  @default(false)\n  profileURL            String?\n  socketId              String?\n  rider                 Rider?\n  driver                Driver?\n  location              Location?\n  lastLocationUpdate    DateTime?\n  isActive              Boolean   @default(true)\n  lastLoginAt           DateTime?\n  lockoutUntil          DateTime?\n  createdAt             DateTime  @default(now())\n  updatedAt             DateTime  @updatedAt\n\n  @@index([socketId, role, email, phonenumber, id])\n}\n\nenum Role {\n  driver\n  rider\n  super_admin\n}\n\ntype Location {\n  type        String   @default(\"Point\")\n  coordinates Float[]\n  address     String?\n  city        String\n  state       String\n  country     String\n  postalCode  String\n  placeId     String // Google Place ID \n  updatedAt   DateTime @default(now())\n}\n\n// ================================\n// Rider Model\n// ================================\n\nmodel Rider {\n  id                String              @id @default(auto()) @map(\"_id\") @db.ObjectId\n  user              User                @relation(fields: [userId], references: [id])\n  userId            String              @unique @db.ObjectId\n  rideHistory       Ride[]\n  emergencyContacts emergencyContacts[]\n  rating            Float               @default(5.0)\n  totalRides        Int                 @default(0)\n  cancelledRides    Int                 @default(0)\n\n  @@index([userId, id])\n}\n\ntype emergencyContacts {\n  name     String\n  phone    String\n  isActive Boolean\n}\n\n// ================================\n// Driver Model\n// ================================\n\nmodel Driver {\n  id                     String                @id @default(auto()) @map(\"_id\") @db.ObjectId\n  user                   User                  @relation(fields: [userId], references: [id])\n  userId                 String                @unique @db.ObjectId\n  documents              Document[]\n  status                 DriverStatus          @default(OFFLINE)\n  vehicleType            VehicleType?\n  vehicle                Vehicle?\n  earnings               Earnings?\n  Ride                   Ride[]\n  rating                 Float                 @default(5.0)\n  totalRides             Int                   @default(0)\n  cancelledRides         Int                   @default(0)\n  isVerified             Boolean               @default(false)\n  registrationProgress   RegistrationProgress?\n  isRegistrationComplete Boolean               @default(false)\n  serviceArea            ServiceArea?          @relation(fields: [serviceAreaId], references: [id])\n  serviceAreaId          String?               @db.ObjectId\n  isInServiceArea        Boolean               @default(true)\n  availability           Availability?\n  createdAt              DateTime              @default(now())\n  updatedAt              DateTime              @updatedAt\n\n  @@index([userId, id, status, vehicleType])\n}\n\nmodel ServiceArea {\n  id          String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name        String\n  type        String   @default(\"Polygon\")\n  coordinates Json // GeoJSON Polygon coordinates\n  drivers     Driver[]\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  @@index([coordinates])\n}\n\ntype Availability {\n  isAvailable    Boolean    @default(false)\n  workingHours   Schedule[]\n  currentShift   Shift?\n  breakEndTime   DateTime?\n  breakStartTime DateTime?\n}\n\ntype Schedule {\n  dayOfWeek Int\n  startTime String\n  endTime   String\n  isActive  Boolean @default(true)\n}\n\ntype Shift {\n  StartTime DateTime\n  endTime   DateTime\n  status    ShiftStatus @default(ACTIVE)\n}\n\nenum ShiftStatus {\n  ACTIVE\n  ON_BREAK\n  ENDED\n}\n\nenum DriverStatus {\n  AVAILABLE\n  OFFLINE\n  ONLINE\n}\n\n// ================================\n// Vehicle Model\n// ================================\n\nmodel Vehicle {\n  id           String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  driver       Driver   @relation(fields: [driverId], references: [id])\n  driverId     String   @unique @db.ObjectId\n  model        String\n  year         Int\n  color        String\n  licensePlate String\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n\n  @@index([driverId, id])\n}\n\nenum VehicleType {\n  CAR\n  BIKE\n}\n\n// ================================\n// Document Model\n// ================================\n\nmodel Document {\n  id         String        @id @default(auto()) @map(\"_id\") @db.ObjectId\n  driver     Driver        @relation(fields: [driverId], references: [id])\n  driverId   String        @db.ObjectId\n  type       StepType\n  documentId String\n  name       String\n  number     String\n  imageUrl   DocumentImage\n  isVerified Boolean       @default(false)\n  createdAt  DateTime      @default(now())\n  updatedAt  DateTime      @updatedAt\n}\n\ntype DocumentImage {\n  front String\n  back  String?\n}\n\n// ================================\n// Earnings Model\n// ================================\n\nmodel Earnings {\n  id             String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  driver         Driver @relation(fields: [driverId], references: [id])\n  driverId       String @unique @db.ObjectId\n  totalEarnings  Float  @default(0)\n  currentBalance Float  @default(0)\n}\n\n// ================================\n// Ride Model\n// ================================\n\nmodel Ride {\n  id           String     @id @default(auto()) @map(\"_id\") @db.ObjectId\n  rider        Rider      @relation(fields: [riderId], references: [id])\n  riderId      String     @db.ObjectId\n  driver       Driver?    @relation(fields: [driverId], references: [id])\n  driverId     String?    @db.ObjectId\n  source       Location\n  destination  Location\n  waypoints    Location[] // For multiple stops\n  distance     Float\n  duration     Int // in minutes\n  promoCodeId  String?    @db.ObjectId\n  cancelReason String?\n  createdAt    DateTime   @default(now())\n  updatedAt    DateTime   @updatedAt\n\n  @@index([riderId, driverId, createdAt])\n}\n\n// ================================\n// Admin Model\n// ================================\n\nmodel Admin {\n  id               String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  phonenumber      String   @unique\n  phoneCountryCode String\n  email            String   @unique\n  role             Role\n  password         String\n  refreshToken     String?\n  createdAt        DateTime @default(now())\n  updatedAt        DateTime @updatedAt\n\n  @@index([email, phonenumber, id])\n}\n\n// ================================\n// Registration Template Models\n// ================================\n\nmodel RegistrationTemplate {\n  id        String             @id @default(auto()) @map(\"_id\") @db.ObjectId\n  country   String\n  steps     RegistrationStep[]\n  createdAt DateTime           @default(now())\n  updatedAt DateTime           @updatedAt\n\n  @@unique([country])\n}\n\ntype RegistrationStepDisplay {\n  title    String\n  subtitle String?\n}\n\ntype RegistrationStepOptions {\n  isRecommended Boolean\n  isDisabled    Boolean\n  redirectURL   String?\n  isUpcoming    Boolean\n  isOptional    Boolean\n}\n\nenum RegistrationStatus {\n  not_started\n  in_progress\n  completed\n  failed\n}\n\nmodel RegistrationStep {\n  id         String                  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  status     RegistrationStatus\n  definition StepDefinition?\n  display    RegistrationStepDisplay\n  options    RegistrationStepOptions\n  isActive   Boolean                 @default(true)\n  createdAt  DateTime                @default(now())\n  updatedAt  DateTime                @updatedAt\n  template   RegistrationTemplate    @relation(fields: [templateId], references: [id])\n  templateId String                  @db.ObjectId\n}\n\nmodel StepDefinition {\n  id          String           @id @default(auto()) @map(\"_id\") @db.ObjectId\n  step        RegistrationStep @relation(fields: [stepId], references: [id])\n  stepId      String           @unique @db.ObjectId\n  type        StepType\n  stepVersion Int\n  display     StepDisplay\n  createdAt   DateTime         @default(now())\n  updatedAt   DateTime         @updatedAt\n\n  @@unique([stepId, type, stepVersion])\n}\n\ntype StepDisplay {\n  StepTitle                    String\n  StepPreviewTopInstruction    String?\n  StepPreviewBottomInstruction String?\n  StepPreviewInstructionsList  String[]\n  StepPreviewImageURL          String?\n  StepUploadActionText         String?\n  StepUseMyPhoneText           String?\n}\n\nenum StepType {\n  driverLicense\n  profilePhoto\n  document\n  vehicleRegistration\n  vehicleInsurance\n}\n\nmodel RegistrationProgress {\n  id             String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  driver         Driver   @relation(fields: [driverId], references: [id])\n  driverId       String   @unique @db.ObjectId\n  country        String\n  currentStepId  String\n  completedSteps String[]\n  createdAt      DateTime @default(now())\n  updatedAt      DateTime @updatedAt\n}\n",
  "inlineSchemaHash": "88978cca321771159c94787019fcd6f9dfa4b901cf55d77c80507ad5825115ee",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"firstname\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastname\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phonenumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phoneCountryCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isVerifiedEmail\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isVerifiedPhonenumber\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"profileURL\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"socketId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rider\",\"kind\":\"object\",\"type\":\"Rider\",\"relationName\":\"RiderToUser\"},{\"name\":\"driver\",\"kind\":\"object\",\"type\":\"Driver\",\"relationName\":\"DriverToUser\"},{\"name\":\"location\",\"kind\":\"object\",\"type\":\"Location\"},{\"name\":\"lastLocationUpdate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"lastLoginAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lockoutUntil\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Rider\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"RiderToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rideHistory\",\"kind\":\"object\",\"type\":\"Ride\",\"relationName\":\"RideToRider\"},{\"name\":\"emergencyContacts\",\"kind\":\"object\",\"type\":\"emergencyContacts\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"totalRides\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"cancelledRides\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":null},\"Driver\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"DriverToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"documents\",\"kind\":\"object\",\"type\":\"Document\",\"relationName\":\"DocumentToDriver\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"DriverStatus\"},{\"name\":\"vehicleType\",\"kind\":\"enum\",\"type\":\"VehicleType\"},{\"name\":\"vehicle\",\"kind\":\"object\",\"type\":\"Vehicle\",\"relationName\":\"DriverToVehicle\"},{\"name\":\"earnings\",\"kind\":\"object\",\"type\":\"Earnings\",\"relationName\":\"DriverToEarnings\"},{\"name\":\"Ride\",\"kind\":\"object\",\"type\":\"Ride\",\"relationName\":\"DriverToRide\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"totalRides\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"cancelledRides\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"registrationProgress\",\"kind\":\"object\",\"type\":\"RegistrationProgress\",\"relationName\":\"DriverToRegistrationProgress\"},{\"name\":\"isRegistrationComplete\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"serviceArea\",\"kind\":\"object\",\"type\":\"ServiceArea\",\"relationName\":\"DriverToServiceArea\"},{\"name\":\"serviceAreaId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isInServiceArea\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"availability\",\"kind\":\"object\",\"type\":\"Availability\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"ServiceArea\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coordinates\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"drivers\",\"kind\":\"object\",\"type\":\"Driver\",\"relationName\":\"DriverToServiceArea\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Vehicle\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"driver\",\"kind\":\"object\",\"type\":\"Driver\",\"relationName\":\"DriverToVehicle\"},{\"name\":\"driverId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"model\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"year\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"color\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"licensePlate\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Document\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"driver\",\"kind\":\"object\",\"type\":\"Driver\",\"relationName\":\"DocumentToDriver\"},{\"name\":\"driverId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"StepType\"},{\"name\":\"documentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"number\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageUrl\",\"kind\":\"object\",\"type\":\"DocumentImage\"},{\"name\":\"isVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Earnings\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"driver\",\"kind\":\"object\",\"type\":\"Driver\",\"relationName\":\"DriverToEarnings\"},{\"name\":\"driverId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"totalEarnings\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"currentBalance\",\"kind\":\"scalar\",\"type\":\"Float\"}],\"dbName\":null},\"Ride\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"rider\",\"kind\":\"object\",\"type\":\"Rider\",\"relationName\":\"RideToRider\"},{\"name\":\"riderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"driver\",\"kind\":\"object\",\"type\":\"Driver\",\"relationName\":\"DriverToRide\"},{\"name\":\"driverId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"source\",\"kind\":\"object\",\"type\":\"Location\"},{\"name\":\"destination\",\"kind\":\"object\",\"type\":\"Location\"},{\"name\":\"waypoints\",\"kind\":\"object\",\"type\":\"Location\"},{\"name\":\"distance\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"promoCodeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cancelReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Admin\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"phonenumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phoneCountryCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refreshToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"RegistrationTemplate\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"country\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"steps\",\"kind\":\"object\",\"type\":\"RegistrationStep\",\"relationName\":\"RegistrationStepToRegistrationTemplate\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"RegistrationStep\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"RegistrationStatus\"},{\"name\":\"definition\",\"kind\":\"object\",\"type\":\"StepDefinition\",\"relationName\":\"RegistrationStepToStepDefinition\"},{\"name\":\"display\",\"kind\":\"object\",\"type\":\"RegistrationStepDisplay\"},{\"name\":\"options\",\"kind\":\"object\",\"type\":\"RegistrationStepOptions\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"template\",\"kind\":\"object\",\"type\":\"RegistrationTemplate\",\"relationName\":\"RegistrationStepToRegistrationTemplate\"},{\"name\":\"templateId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"StepDefinition\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"step\",\"kind\":\"object\",\"type\":\"RegistrationStep\",\"relationName\":\"RegistrationStepToStepDefinition\"},{\"name\":\"stepId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"StepType\"},{\"name\":\"stepVersion\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"display\",\"kind\":\"object\",\"type\":\"StepDisplay\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"RegistrationProgress\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"driver\",\"kind\":\"object\",\"type\":\"Driver\",\"relationName\":\"DriverToRegistrationProgress\"},{\"name\":\"driverId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"country\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"currentStepId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"completedSteps\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

