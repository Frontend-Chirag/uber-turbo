
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  role: 'role',
  firstname: 'firstname',
  lastname: 'lastname',
  email: 'email',
  phonenumber: 'phonenumber',
  phoneCountryCode: 'phoneCountryCode',
  isVerifiedEmail: 'isVerifiedEmail',
  isVerifiedPhonenumber: 'isVerifiedPhonenumber',
  profileURL: 'profileURL',
  socketId: 'socketId',
  lastLocationUpdate: 'lastLocationUpdate',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  lockoutUntil: 'lockoutUntil',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RiderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  rating: 'rating',
  totalRides: 'totalRides',
  cancelledRides: 'cancelledRides'
};

exports.Prisma.DriverScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  status: 'status',
  vehicleType: 'vehicleType',
  rating: 'rating',
  totalRides: 'totalRides',
  cancelledRides: 'cancelledRides',
  isVerified: 'isVerified',
  isRegistrationComplete: 'isRegistrationComplete',
  serviceAreaId: 'serviceAreaId',
  isInServiceArea: 'isInServiceArea',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceAreaScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  coordinates: 'coordinates',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VehicleScalarFieldEnum = {
  id: 'id',
  driverId: 'driverId',
  model: 'model',
  year: 'year',
  color: 'color',
  licensePlate: 'licensePlate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  driverId: 'driverId',
  type: 'type',
  documentId: 'documentId',
  name: 'name',
  number: 'number',
  isVerified: 'isVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EarningsScalarFieldEnum = {
  id: 'id',
  driverId: 'driverId',
  totalEarnings: 'totalEarnings',
  currentBalance: 'currentBalance'
};

exports.Prisma.RideScalarFieldEnum = {
  id: 'id',
  riderId: 'riderId',
  driverId: 'driverId',
  distance: 'distance',
  duration: 'duration',
  promoCodeId: 'promoCodeId',
  cancelReason: 'cancelReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  phonenumber: 'phonenumber',
  phoneCountryCode: 'phoneCountryCode',
  email: 'email',
  role: 'role',
  password: 'password',
  refreshToken: 'refreshToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RegistrationTemplateScalarFieldEnum = {
  id: 'id',
  country: 'country',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RegistrationStepScalarFieldEnum = {
  id: 'id',
  status: 'status',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  templateId: 'templateId'
};

exports.Prisma.StepDefinitionScalarFieldEnum = {
  id: 'id',
  stepId: 'stepId',
  type: 'type',
  stepVersion: 'stepVersion',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RegistrationProgressScalarFieldEnum = {
  id: 'id',
  driverId: 'driverId',
  country: 'country',
  currentStepId: 'currentStepId',
  completedSteps: 'completedSteps',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.Role = exports.$Enums.Role = {
  driver: 'driver',
  rider: 'rider',
  super_admin: 'super_admin'
};

exports.DriverStatus = exports.$Enums.DriverStatus = {
  AVAILABLE: 'AVAILABLE',
  OFFLINE: 'OFFLINE',
  ONLINE: 'ONLINE'
};

exports.VehicleType = exports.$Enums.VehicleType = {
  CAR: 'CAR',
  BIKE: 'BIKE'
};

exports.StepType = exports.$Enums.StepType = {
  driverLicense: 'driverLicense',
  profilePhoto: 'profilePhoto',
  document: 'document',
  vehicleRegistration: 'vehicleRegistration',
  vehicleInsurance: 'vehicleInsurance'
};

exports.RegistrationStatus = exports.$Enums.RegistrationStatus = {
  not_started: 'not_started',
  in_progress: 'in_progress',
  completed: 'completed',
  failed: 'failed'
};

exports.ShiftStatus = exports.$Enums.ShiftStatus = {
  ACTIVE: 'ACTIVE',
  ON_BREAK: 'ON_BREAK',
  ENDED: 'ENDED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Rider: 'Rider',
  Driver: 'Driver',
  ServiceArea: 'ServiceArea',
  Vehicle: 'Vehicle',
  Document: 'Document',
  Earnings: 'Earnings',
  Ride: 'Ride',
  Admin: 'Admin',
  RegistrationTemplate: 'RegistrationTemplate',
  RegistrationStep: 'RegistrationStep',
  StepDefinition: 'StepDefinition',
  RegistrationProgress: 'RegistrationProgress'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
