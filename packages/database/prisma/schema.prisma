generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
    output = "./../generated/client"
}

datasource db {
    provider  = "mongodb"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_DATABASE_URL")
}

// ================================
// User Model
// ================================

model User {
    id                    String    @id @default(auto()) @map("_id") @db.ObjectId
    role                  Role
    firstname             String
    lastname              String?
    email                 String?   @unique
    phonenumber           String?   @unique
    phoneCountryCode      String?
    isVerifiedEmail       Boolean?  @default(false)
    isVerifiedPhonenumber Boolean?  @default(false)
    profileURL            String?
    socketId              String?
    rider                 Rider?
    driver                Driver?
    location              Location?
    lastLocationUpdate    DateTime?
    isActive              Boolean   @default(true)
    lastLoginAt           DateTime?
    lockoutUntil          DateTime?
    createdAt             DateTime  @default(now())
    updatedAt             DateTime  @updatedAt

    @@index([socketId, role, email, phonenumber, id])
}

enum Role {
    driver
    rider
    super_admin
}

type Location {
    type        String   @default("Point")
    coordinates Float[]
    address     String?
    city        String
    state       String
    country     String
    postalCode  String
    placeId     String // Google Place ID 
    updatedAt   DateTime @default(now())
}

// ================================
// Rider Model
// ================================

model Rider {
    id                String              @id @default(auto()) @map("_id") @db.ObjectId
    user              User                @relation(fields: [userId], references: [id])
    userId            String              @unique @db.ObjectId
    rideHistory       Ride[]
    emergencyContacts emergencyContacts[]
    rating            Float               @default(5.0)
    totalRides        Int                 @default(0)
    cancelledRides    Int                 @default(0)

    @@index([userId, id])
}

type emergencyContacts {
    name     String
    phone    String
    isActive Boolean
}

// ================================
// Driver Model
// ================================

model Driver {
    id                     String                @id @default(auto()) @map("_id") @db.ObjectId
    user                   User                  @relation(fields: [userId], references: [id])
    userId                 String                @unique @db.ObjectId
    documents              Document[]
    status                 DriverStatus          @default(OFFLINE)
    vehicleType            VehicleType?
    vehicle                Vehicle?
    earnings               Earnings?
    Ride                   Ride[]
    rating                 Float                 @default(5.0)
    totalRides             Int                   @default(0)
    cancelledRides         Int                   @default(0)
    isVerified             Boolean               @default(false)
    registrationProgress   RegistrationProgress?
    isRegistrationComplete Boolean               @default(false)
    serviceArea            ServiceArea?          @relation(fields: [serviceAreaId], references: [id])
    serviceAreaId          String?               @db.ObjectId
    isInServiceArea        Boolean               @default(true)
    availability           Availability?
    createdAt              DateTime              @default(now())
    updatedAt              DateTime              @updatedAt

    @@index([userId, id, status, vehicleType])
}

model ServiceArea {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    type        String   @default("Polygon")
    coordinates Json // GeoJSON Polygon coordinates
    drivers     Driver[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([coordinates])
}

type Availability {
    isAvailable    Boolean    @default(false)
    workingHours   Schedule[]
    currentShift   Shift?
    breakEndTime   DateTime?
    breakStartTime DateTime?
}

type Schedule {
    dayOfWeek Int
    startTime String
    endTime   String
    isActive  Boolean @default(true)
}

type Shift {
    StartTime DateTime
    endTime   DateTime
    status    ShiftStatus @default(ACTIVE)
}

enum ShiftStatus {
    ACTIVE
    ON_BREAK
    ENDED
}

enum DriverStatus {
    AVAILABLE
    OFFLINE
    ONLINE
}

// ================================
// Vehicle Model
// ================================

model Vehicle {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    driver       Driver   @relation(fields: [driverId], references: [id])
    driverId     String   @unique @db.ObjectId
    model        String
    year         Int
    color        String
    licensePlate String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@index([driverId, id])
}

enum VehicleType {
    CAR
    BIKE
}

// ================================
// Document Model
// ================================

model Document {
    id         String        @id @default(auto()) @map("_id") @db.ObjectId
    driver     Driver        @relation(fields: [driverId], references: [id])
    driverId   String        @db.ObjectId
    type       StepType
    documentId String
    name       String
    number     String
    imageUrl   DocumentImage
    isVerified Boolean       @default(false)
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
}

type DocumentImage {
    front String
    back  String?
}

// ================================
// Earnings Model
// ================================

model Earnings {
    id             String @id @default(auto()) @map("_id") @db.ObjectId
    driver         Driver @relation(fields: [driverId], references: [id])
    driverId       String @unique @db.ObjectId
    totalEarnings  Float  @default(0)
    currentBalance Float  @default(0)
}

// ================================
// Ride Model
// ================================

model Ride {
    id           String     @id @default(auto()) @map("_id") @db.ObjectId
    rider        Rider      @relation(fields: [riderId], references: [id])
    riderId      String     @db.ObjectId
    driver       Driver?    @relation(fields: [driverId], references: [id])
    driverId     String?    @db.ObjectId
    source       Location
    destination  Location
    waypoints    Location[] // For multiple stops
    distance     Float
    duration     Int // in minutes
    promoCodeId  String?    @db.ObjectId
    cancelReason String?
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    @@index([riderId, driverId, createdAt])
}

// ================================
// Admin Model
// ================================

model Admin {
    id               String   @id @default(auto()) @map("_id") @db.ObjectId
    phonenumber      String   @unique
    phoneCountryCode String
    email            String   @unique
    role             Role
    password         String
    refreshToken     String?
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    @@index([email, phonenumber, id])
}

// ================================
// Registration Template Models
// ================================

model RegistrationTemplate {
    id        String             @id @default(auto()) @map("_id") @db.ObjectId
    country   String
    steps     RegistrationStep[]
    createdAt DateTime           @default(now())
    updatedAt DateTime           @updatedAt

    @@unique([country])
}

type RegistrationStepDisplay {
    title    String
    subtitle String?
}

type RegistrationStepOptions {
    isRecommended Boolean
    isDisabled    Boolean
    redirectURL   String?
    isUpcoming    Boolean
    isOptional    Boolean
}

enum RegistrationStatus {
    not_started
    in_progress
    completed
    failed
}

model RegistrationStep {
    id         String                  @id @default(auto()) @map("_id") @db.ObjectId
    status     RegistrationStatus
    definition StepDefinition?
    display    RegistrationStepDisplay
    options    RegistrationStepOptions
    isActive   Boolean                 @default(true)
    createdAt  DateTime                @default(now())
    updatedAt  DateTime                @updatedAt
    template   RegistrationTemplate    @relation(fields: [templateId], references: [id])
    templateId String                  @db.ObjectId
}

model StepDefinition {
    id          String           @id @default(auto()) @map("_id") @db.ObjectId
    step        RegistrationStep @relation(fields: [stepId], references: [id])
    stepId      String           @unique @db.ObjectId
    type        StepType
    stepVersion Int
    display     StepDisplay
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt

    @@unique([stepId, type, stepVersion])
}

type StepDisplay {
    StepTitle                    String
    StepPreviewTopInstruction    String?
    StepPreviewBottomInstruction String?
    StepPreviewInstructionsList  String[]
    StepPreviewImageURL          String?
    StepUploadActionText         String?
    StepUseMyPhoneText           String?
}

enum StepType {
    driverLicense
    profilePhoto
    document
    vehicleRegistration
    vehicleInsurance
}

model RegistrationProgress {
    id             String   @id @default(auto()) @map("_id") @db.ObjectId
    driver         Driver   @relation(fields: [driverId], references: [id])
    driverId       String   @unique @db.ObjectId
    country        String
    currentStepId  String
    completedSteps String[]
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
}
