// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v4.24.4
// source: google/maps/routing/v2/localized_time.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { LocalizedText } from "../../../type/localized_text";

export const protobufPackage = "google.maps.routing.v2";

/** Localized description of time. */
export interface LocalizedTime {
  /** The time specified as a string in a given time zone. */
  time:
    | LocalizedText
    | undefined;
  /**
   * Contains the time zone. The value is the name of the time zone as defined
   * in the [IANA Time Zone Database](http://www.iana.org/time-zones), e.g.
   * "America/New_York".
   */
  timeZone: string;
}

function createBaseLocalizedTime(): LocalizedTime {
  return { time: undefined, timeZone: "" };
}

export const LocalizedTime: MessageFns<LocalizedTime> = {
  encode(message: LocalizedTime, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.time !== undefined) {
      LocalizedText.encode(message.time, writer.uint32(10).fork()).join();
    }
    if (message.timeZone !== "") {
      writer.uint32(18).string(message.timeZone);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocalizedTime {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocalizedTime();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.time = LocalizedText.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.timeZone = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocalizedTime {
    return {
      time: isSet(object.time) ? LocalizedText.fromJSON(object.time) : undefined,
      timeZone: isSet(object.timeZone) ? globalThis.String(object.timeZone) : "",
    };
  },

  toJSON(message: LocalizedTime): unknown {
    const obj: any = {};
    if (message.time !== undefined) {
      obj.time = LocalizedText.toJSON(message.time);
    }
    if (message.timeZone !== "") {
      obj.timeZone = message.timeZone;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LocalizedTime>, I>>(base?: I): LocalizedTime {
    return LocalizedTime.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LocalizedTime>, I>>(object: I): LocalizedTime {
    const message = createBaseLocalizedTime();
    message.time = (object.time !== undefined && object.time !== null)
      ? LocalizedText.fromPartial(object.time)
      : undefined;
    message.timeZone = object.timeZone ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
