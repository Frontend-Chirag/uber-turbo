// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v4.24.4
// source: route.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "route";

export interface LatLng {
  latitude: number;
  longitude: number;
}

export interface Route {
  destinations: LatLng | undefined;
  origin: LatLng | undefined;
}

export interface Legs {
  distance: number;
  duration: number;
}

export interface GetRouteResponse {
  distance: number;
  eta: number;
  legs: Legs[];
  polyline: string;
}

export interface GetRouteRequest {
  routes: Route | undefined;
}

function createBaseLatLng(): LatLng {
  return { latitude: 0, longitude: 0 };
}

export const LatLng: MessageFns<LatLng> = {
  encode(message: LatLng, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.latitude !== 0) {
      writer.uint32(9).double(message.latitude);
    }
    if (message.longitude !== 0) {
      writer.uint32(17).double(message.longitude);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LatLng {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLatLng();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.latitude = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.longitude = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LatLng {
    return {
      latitude: isSet(object.latitude) ? globalThis.Number(object.latitude) : 0,
      longitude: isSet(object.longitude) ? globalThis.Number(object.longitude) : 0,
    };
  },

  toJSON(message: LatLng): unknown {
    const obj: any = {};
    if (message.latitude !== 0) {
      obj.latitude = message.latitude;
    }
    if (message.longitude !== 0) {
      obj.longitude = message.longitude;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LatLng>, I>>(base?: I): LatLng {
    return LatLng.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LatLng>, I>>(object: I): LatLng {
    const message = createBaseLatLng();
    message.latitude = object.latitude ?? 0;
    message.longitude = object.longitude ?? 0;
    return message;
  },
};

function createBaseRoute(): Route {
  return { destinations: undefined, origin: undefined };
}

export const Route: MessageFns<Route> = {
  encode(message: Route, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destinations !== undefined) {
      LatLng.encode(message.destinations, writer.uint32(10).fork()).join();
    }
    if (message.origin !== undefined) {
      LatLng.encode(message.origin, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Route {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.destinations = LatLng.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.origin = LatLng.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Route {
    return {
      destinations: isSet(object.destinations) ? LatLng.fromJSON(object.destinations) : undefined,
      origin: isSet(object.origin) ? LatLng.fromJSON(object.origin) : undefined,
    };
  },

  toJSON(message: Route): unknown {
    const obj: any = {};
    if (message.destinations !== undefined) {
      obj.destinations = LatLng.toJSON(message.destinations);
    }
    if (message.origin !== undefined) {
      obj.origin = LatLng.toJSON(message.origin);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Route>, I>>(base?: I): Route {
    return Route.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Route>, I>>(object: I): Route {
    const message = createBaseRoute();
    message.destinations = (object.destinations !== undefined && object.destinations !== null)
      ? LatLng.fromPartial(object.destinations)
      : undefined;
    message.origin = (object.origin !== undefined && object.origin !== null)
      ? LatLng.fromPartial(object.origin)
      : undefined;
    return message;
  },
};

function createBaseLegs(): Legs {
  return { distance: 0, duration: 0 };
}

export const Legs: MessageFns<Legs> = {
  encode(message: Legs, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.distance !== 0) {
      writer.uint32(9).double(message.distance);
    }
    if (message.duration !== 0) {
      writer.uint32(17).double(message.duration);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Legs {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLegs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.distance = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.duration = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Legs {
    return {
      distance: isSet(object.distance) ? globalThis.Number(object.distance) : 0,
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : 0,
    };
  },

  toJSON(message: Legs): unknown {
    const obj: any = {};
    if (message.distance !== 0) {
      obj.distance = message.distance;
    }
    if (message.duration !== 0) {
      obj.duration = message.duration;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Legs>, I>>(base?: I): Legs {
    return Legs.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Legs>, I>>(object: I): Legs {
    const message = createBaseLegs();
    message.distance = object.distance ?? 0;
    message.duration = object.duration ?? 0;
    return message;
  },
};

function createBaseGetRouteResponse(): GetRouteResponse {
  return { distance: 0, eta: 0, legs: [], polyline: "" };
}

export const GetRouteResponse: MessageFns<GetRouteResponse> = {
  encode(message: GetRouteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.distance !== 0) {
      writer.uint32(9).double(message.distance);
    }
    if (message.eta !== 0) {
      writer.uint32(17).double(message.eta);
    }
    for (const v of message.legs) {
      Legs.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.polyline !== "") {
      writer.uint32(34).string(message.polyline);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRouteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRouteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.distance = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.eta = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.legs.push(Legs.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.polyline = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRouteResponse {
    return {
      distance: isSet(object.distance) ? globalThis.Number(object.distance) : 0,
      eta: isSet(object.eta) ? globalThis.Number(object.eta) : 0,
      legs: globalThis.Array.isArray(object?.legs) ? object.legs.map((e: any) => Legs.fromJSON(e)) : [],
      polyline: isSet(object.polyline) ? globalThis.String(object.polyline) : "",
    };
  },

  toJSON(message: GetRouteResponse): unknown {
    const obj: any = {};
    if (message.distance !== 0) {
      obj.distance = message.distance;
    }
    if (message.eta !== 0) {
      obj.eta = message.eta;
    }
    if (message.legs?.length) {
      obj.legs = message.legs.map((e) => Legs.toJSON(e));
    }
    if (message.polyline !== "") {
      obj.polyline = message.polyline;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetRouteResponse>, I>>(base?: I): GetRouteResponse {
    return GetRouteResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetRouteResponse>, I>>(object: I): GetRouteResponse {
    const message = createBaseGetRouteResponse();
    message.distance = object.distance ?? 0;
    message.eta = object.eta ?? 0;
    message.legs = object.legs?.map((e) => Legs.fromPartial(e)) || [];
    message.polyline = object.polyline ?? "";
    return message;
  },
};

function createBaseGetRouteRequest(): GetRouteRequest {
  return { routes: undefined };
}

export const GetRouteRequest: MessageFns<GetRouteRequest> = {
  encode(message: GetRouteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.routes !== undefined) {
      Route.encode(message.routes, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRouteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRouteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.routes = Route.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRouteRequest {
    return { routes: isSet(object.routes) ? Route.fromJSON(object.routes) : undefined };
  },

  toJSON(message: GetRouteRequest): unknown {
    const obj: any = {};
    if (message.routes !== undefined) {
      obj.routes = Route.toJSON(message.routes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetRouteRequest>, I>>(base?: I): GetRouteRequest {
    return GetRouteRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetRouteRequest>, I>>(object: I): GetRouteRequest {
    const message = createBaseGetRouteRequest();
    message.routes = (object.routes !== undefined && object.routes !== null)
      ? Route.fromPartial(object.routes)
      : undefined;
    return message;
  },
};

export type RouteServiceService = typeof RouteServiceService;
export const RouteServiceService = {
  getRoute: {
    path: "/route.RouteService/GetRoute",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetRouteRequest): Buffer => Buffer.from(GetRouteRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetRouteRequest => GetRouteRequest.decode(value),
    responseSerialize: (value: GetRouteResponse): Buffer => Buffer.from(GetRouteResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetRouteResponse => GetRouteResponse.decode(value),
  },
} as const;

export interface RouteServiceServer extends UntypedServiceImplementation {
  getRoute: handleUnaryCall<GetRouteRequest, GetRouteResponse>;
}

export interface RouteServiceClient extends Client {
  getRoute(
    request: GetRouteRequest,
    callback: (error: ServiceError | null, response: GetRouteResponse) => void,
  ): ClientUnaryCall;
  getRoute(
    request: GetRouteRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetRouteResponse) => void,
  ): ClientUnaryCall;
  getRoute(
    request: GetRouteRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetRouteResponse) => void,
  ): ClientUnaryCall;
}

export const RouteServiceClient = makeGenericClientConstructor(
  RouteServiceService,
  "route.RouteService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): RouteServiceClient;
  service: typeof RouteServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
